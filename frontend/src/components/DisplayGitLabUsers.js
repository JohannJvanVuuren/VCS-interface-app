/* Import of the main stylesheet generated by the SCSS files and the preprocessor */
import '../sass/main.css';
/* Import of React-Bootstrap components needed in the styling of this component */
import Pagination from 'react-bootstrap/Pagination';
import Spinner from 'react-bootstrap/Spinner';
import {Link} from 'react-router-dom';

/* Import of the useLocation hook which will enable to get the state passed via the Link components in
* the Header component */
import {useLocation} from 'react-router-dom';
import {useEffect, useState} from "react";

/* Import of the axios client to make the API calls to the backend */
import axios from "axios";

/* Definition of the DisplayGitLabUsers component */
export const DisplayGitLabUsers = () => {

    /* Declaration and initialisation of state variables */
    const [users, setUsers] = useState([]);
    const [isLoading, setIsLoading] = useState(false);
    const [page, setPage] = useState(1);

    /* Creation of an instance of useLocation */
    const location = useLocation();
    /* Storing the state data from the useLocation instance */
    const user = location.state.user;

    /* Using Axios in the useEffect hook to fetch the user data from the RESFull API. The hook also
    * manages the isLoading state variable which is necessary for the spinner and pagination.   */
    useEffect(() => {
        setIsLoading(true);

        /* Axios post request to the gitlabInterface route on the backend. The username and active
        * page is included in the body of the request. The data obtained from the backend is then used
        * to set users array and isLoading state variables. isLoading is used to determine whether
        * a spinner must be shown during loading */
        axios.post(`http://localhost:8000/gitlabInterface`, {
            searchQuery: user.toLowerCase(),
            page: page
        })
            .then(response => {
                setUsers(response.data);
                setIsLoading(false);
                return response.data;
            })
            .catch(err => {
                console.log(err);
                setIsLoading(false);
            });
    }, [page, user]); // useEffect hook dependencies


    return (
        <div className={'vcs-container'}>
            <h1>GitLab User Listing</h1>
            <div className={'vcs-display'}>
                {/* Using the array map to loop through the users array to display individual properties of
                 unique users */}
                {users.map((user, index) => {
                    const webUrl = user.web_url;
                    return (
                        <div className={'user-wrapper'} key={index}>
                            <div className={'avatar'}>
                                <a href={user.web_url} target={'_blank'} rel="noreferrer">
                                    <img src={user.avatar_url} alt={user.username}/>
                                </a>
                            </div>
                            <a className={'username-link'} href={user.web_url} target={'_blank'} rel="noreferrer">
                                <p className={'username'}>{user.username}</p>
                            </a>
                            {/* Passing the username and webUrl to the githubRepos page using the state
                                attribute of the React Router Link component */}
                            <Link
                                className={'repo-link'}
                                to={'/gitlabRepos'}
                                state={{
                                    user: user,
                                    webUrl: webUrl
                                }}
                            >
                                Repositories
                            </Link>
                        </div>
                    )
                })}
            </div>
            <div className={'pagination'}>
                {/* This ternary operator determines whether the spinner will be displayed (while the data is
                loading) or whether the paginated data is displayed (once the data has finished loading) */}
                {isLoading ? (
                    <div className={'mx-auto'}>
                        <Spinner animation="border" variant='light'/>
                    </div>
                ) : (
                    /* This is a React-Bootstrap pagination system that has been adapted to this component */
                    <div className={'mx-auto'}>
                        <Pagination size={'lg'} className={'pagination-item'}>
                            <Pagination.First
                                disabled={page === 1}
                                onClick={() => setPage(1)}
                            />
                            <Pagination.Prev
                                disabled={page === 1}
                                onClick={() => setPage(prevState => prevState - 1)}
                            />
                            <Pagination.Ellipsis/>
                            <Pagination.Item active>{page}</Pagination.Item>
                            <Pagination.Ellipsis/>
                            <Pagination.Next
                                disabled={page === users.length}
                                onClick={() => setPage(prevState => prevState + 1)}/>
                            <Pagination.Last
                                disabled={page === users.length}
                                onClick={() => setPage(users.length)}
                            />
                        </Pagination>
                    </div>
                )}
            </div>
        </div>
    )
}